c
Dir[File.join('.', 'lib/*.rb')]
Dir[File.join('.', 'support/shared_examples/*.rb')]
Dir[File.join('.', 'lib/*.rb')]
Dir[File.join('./support/')]
Dir[File.join('./support/shared_examples/*.*')]
Dir[File.join('./support/shared_examples/*.rb')]
File.join('./support/shared_examples/*.rb')
Dir[File.join('./support/shared_examples/*.rb')]
Dir[File.join('.', 'support/shared_examples/*.rb')]
Dir[File.join('.', 'support/*.rb')]
Dir[File.join('.', 'support/*/*.rb')]
Dir[File.join('.', 'lib/*.rb')]
Dir[File.join('.', 'support/shared_examples/*.rb')]
c
log_analyzer.most_page_views
c
log_analyzer.most_page_views
c
log_analyzer.datas
c
log_analyzer.datas
log_analyzer
log_analyzer.analyze.datas
log_analyzer.analyze.data
log_analyzer.analyze
c
log.valid?
log = described_class.new('')
described_class.new
described_class.new('ss')
c
aa.errors.full_messages.to_sentence
aa.errors..full_messages.to_sentence
aa.errors.messages
aa.errors.messages.to_sentences
aa.errors.messages.to_sentence
aa.errors.messages
aa.errors
aa.valid?
aa = described_class.new(file_path)
described_class.new(file_path).valid?
described_class.new(file_path).errors
described_class.new(file_path).valid?
described_class.new(file_path)
c
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.uniq.size }.sort_by { |k, v| -v }.to_h
datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.uniq.size }.sort_by { |k, v| -v }.to_h
c
datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by { |k, v| -v }.to_h
datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by { |k, v| -v }
datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by{ |_k, v| v.size }.to_h
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by{ |_k, v| v }
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by{ |_k, v| v }.to_h
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by{ |_k, v| _k }.to_h
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by{ |_k, v| v }.to_h
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort_by{ |_k, v| v.size }.to_h
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort.to_h
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }.sort
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v.size }
		datas.each_with_object({}) { |(k, v), hsh| hsh[k] = v }
jai = datas.map do |k, v| k.to_s => v.size end
jai = datas.map do |k, v| {k.to_s => v.size} end
jai = datas.map do |k, v| v.size end
jai = datas.map do |k, v| v end
jai = datas.map do |k, v| k => v.size end
jai
jai = datas.each do |a| a.size end
datas
c
file
c
%w( .log ).include? ext.downcase
c
    %w( .log ).include? ext.downcase
    %w( log ).include? ext.downcase
%w( log )
ext.downcase
    %w( log ).include? ext.downcase
    ext = File.extname(file_path)
File.extname(file_path)
File.exists?(file_path)
file_path = ARGV[0]
ARGV[0]
